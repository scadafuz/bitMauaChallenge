package Step;

import static org.junit.Assert.assertEquals;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import PageObject.PaginaDesafio_;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

/**
 * Faz o Bind com os passos descritos nas features.
 * 
 * @author Bruno Viana Lopes
 * @version 0.0.1
 */
public class Step {
	WebDriver driver;
	
	Properties propriedades=Support.Property.getProp();
	String url=propriedades.getProperty("url").trim();
	Integer timeOut=Integer.parseInt(propriedades.getProperty("timeOut").trim());
	String browser=propriedades.getProperty("browser").trim();
	boolean headless=Boolean.parseBoolean(propriedades.getProperty("headless").trim());;
	PaginaDesafio_ paginaDesafio= new PaginaDesafio_(driver);
	
	/**
	  * Fechar os Browser após a execucao .
	  * 
	  */
	@After
	public void close() {
	    driver.quit();
	   // System.out.println("Closed all the browsers");
	}
	
	@Given("^Acesso a pagina de teste$")
	public void acesso_a_pagina_de_teste() throws InterruptedException {
		
		driver=paginaDesafio.acessar(url,browser,headless);
	}

	@When("^eu informo apenas o nome '(.*)' no campo 'Qual seu nome completo\\?'$")
	public void eu_informo_apenas_o_nome_no_campo_Qual_seu_nome_completo(String nome) throws InterruptedException {
		paginaDesafio.informo_nome(nome);	
	}

	@When("^e retiro o foco do campo$")
	public void e_retiro_o_foco_do_campo() throws InterruptedException {
		paginaDesafio.retirarFoco();
	}

	@Then("^o sistema deve exibir a mensagem informando '(.*)'$")
	public void dever_exibir_uma_mensagem(String msg) {
		WebElement element = driver.findElement(By.className("freebirdFormviewerViewItemsItemErrorMessage"));
		assertEquals(msg, element.getText());
		 driver.quit();
	}
	
	@When("^eu informo o nome completo '(.*)' no campo 'Qual seu nome completo\\?'$")
	public void eu_informo_o_nome_no_campo_Qual_seu_nome_completo(String nome) throws InterruptedException {
		paginaDesafio.informo_nome(nome);
	}

	@Then("^o sistema nao deve exibir mensagem '(.*)'$")
	public void o_sistema_nao_deve_exibir_mensagem(String msg) {
		WebElement element = driver.findElement(By.className("freebirdFormviewerViewItemsItemErrorMessage"));
		assertEquals(false, element.isDisplayed());
		 driver.quit();
	}
		
@When("^informo o email '(.*)' no campo 'Qual seu e-mail\\?'$")
	public void informo_o_email_no_campo_Qual_seu_e_mail(String email) {
	paginaDesafio.informo_email(email);
}

	@When("^informo a cor favorita '(.*)' no campo 'Qual sua cor favorita\\?'$")
	public void informo_a_cor_favorita_no_campo_Qual_sua_cor_favorita(String cor) {
		paginaDesafio.informo_cor_favorita(cor);
	}

	@When("^informo a sobremesa favorita '(.*)' no campo 'Qual sua sobremesa favorita\\?'$")
	public void informo_a_sobremesa_favorita_no_campo_Qual_sua_sobremesa_favorita(String sobremesa) {
		paginaDesafio.informo_sobremesa(sobremesa);
	}

	@When("^informo a comida favorita '(.*)' no campo 'Qual sua comida favorita\\?'$")
	public void informo_a_comida_favorita_no_campo_Qual_sua_comida_favorita(String comida) throws InterruptedException {		
		paginaDesafio.informo_comida(comida);
		
	}

	@When("^informo a graduacao '(.*)' no campo 'O quanto voce gosta de animais\\?'$")
	public void informo_a_graduacao_no_campo_O_quanto_voce_gosta_de_animas(String nota) {
		paginaDesafio.informo_nota_animais(nota);
		
	}

	@When("^informo a graduacao '(.*)' no campo 'Considere os esportes - (.*)'$")
	public void informo_a_graduacao_no_campo_Considere_os_esportes(String graduacao,String esporte) {
		paginaDesafio.informo_graduacao(graduacao, esporte);
	}
	
	@When("^informo a ingredientes '(.*)' no campo 'Quais os ingredientes do sandwich\\? - (.*)'$")
	public void informo_a_ingredientes_no_campo_Quais_os_ingredientes_do_sandwich(String comida,String ingrediente) {
		paginaDesafio.informo_ingredientes(comida,ingrediente);
	   
	}
	
	@When("^informo o dia '(.*)' no campo 'Que dia e hoje\\?'$")
	public void informo_o_dia_no_campo_Que_dia_e_hoje(String quando) {
		paginaDesafio.informo_data(quando);
		
		
	}

	@When("^informo o horario '(.*)' no campo 'Daqui uma hora, que horas serao\\?'$")
	public void informo_o_horario_no_campo_Daqui_uma_hora_que_horas_serao(String quando) {
		
		paginaDesafio.informo_horario(quando);
	}
	
	@When("^clico no Botao 'Enviar'$")
	public void clico_no_Botao_Enviar() {
		paginaDesafio.submeter(); 
	}
	
	@Then("^o sistema deve submeter o formulario$")
	public void o_sistema_deve_submeter_o_formulario() throws InterruptedException {
	timeOut();
	WebElement element = driver.findElement(By.xpath("//div[text() = 'Sua resposta foi registrada.']"));
	assertEquals(true, element.isDisplayed());
	 driver.quit();
	
}
	
	@Then("^o sistema nao deve submeter o formulario$")
	public void o_sistema_deve_nao_deve_submeter_o_formulario() throws InterruptedException {
		
		timeOut();
		List<WebElement> elements = driver.findElements(By.xpath("//div[text() = 'Sua resposta foi registrada.']"));
		assertEquals(0, elements.size());
		 driver.quit();
	}

	
	
	
	
	
	
	
	@Then("^o sistema deve exibir a mensagem 'Preencha o sobrenome'$")
	public void o_sistema_deve_exibir_a_mensagem_Preencha_o_sobrenome() {
		WebElement element = driver.findElement(By.className("freebirdFormviewerViewItemsItemErrorMessage"));
		assertEquals("Preencha o sobrenome", element.getText());
		 driver.quit();
	}

	@Then("^o sistema deve exibir a mensagem 'Esta pergunta exige pelo menos uma resposta por linha'$")
	public void o_sistema_deve_exibir_a_mensagem_Esta_pergunta_exige_pelo_menos_uma_resposta_por_linha() {
		
		WebElement element = driver.findElement(By.xpath("//div[text() = 'Esta pergunta exige pelo menos uma resposta por linha']"));
		assertEquals(true, element.isDisplayed());
		 driver.quit();
		
	}

	@Then("^o sistema deve exibir mensagens informando os campo obrigatorio$")
	public void o_sistema_deve_exibir_mensagens_informando_os_campo_obrigatorio() {
		WebElement element = driver.findElement(By.xpath("//div[text() = 'Esta pergunta é obrigatória']"));
		assertEquals(true, element.isDisplayed());
		assertEquals("Esta pergunta é obrigatória", element.getText());
		 driver.quit();
	}


	@Then("^o sistema deve exibir a mensagem 'Esse e-mail nao parece valido'$")
	public void o_sistema_deve_exibir_a_mensagem_Esse_e_mail_nao_parece_valido() {
		//WebElement element = driver.findElement(By.className("freebirdFormviewerViewItemsItemErrorMessage"));
		WebElement element = driver.findElement(By.xpath("//div[text() = 'Esse e-mail não parece válido']"));
		assertEquals("Esse e-mail não parece válido", element.getText());
		assertEquals(true, element.isDisplayed());
		 driver.quit();
	}

	@Then("^o sistema deve exibir a mensagem 'Nao selecione mais de uma resposta por coluna'$")
	public void o_sistema_deve_exibir_a_mensagem_Nao_selecione_mais_de_uma_resposta_por_coluna() {
		//WebElement element = driver.findElement(By.className("freebirdFormviewerViewItemsItemErrorMessage"));
		WebElement element = driver.findElement(By.xpath("//div[text() = 'Não selecione mais de uma resposta por coluna']"));
		assertEquals(true, element.isDisplayed());
		assertEquals("Não selecione mais de uma resposta por coluna", element.getText());
		 driver.quit();
	}

	@Then("^o sistema deve exibir a mensagem 'Esta pergunta e obrigatoria'$")
	public void o_sistema_deve_exibir_a_mensagem_Esta_pergunta_e_obrigatoria() {
		//WebElement element = driver.findElement(By.className("freebirdFormviewerViewItemsItemErrorMessage"));
		WebElement element = driver.findElement(By.xpath("//div[text() = 'Esta pergunta é obrigatória']"));
		assertEquals(true, element.isDisplayed());
		assertEquals("Esta pergunta é obrigatória", element.getText());
		 driver.quit();
	}
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	/**
	  * Timeout do driver/browser .
	  * @throws Exceccao do Timeout
	  */
	public void timeOut() throws InterruptedException {
		
		driver.manage().timeouts().pageLoadTimeout(timeOut, TimeUnit.SECONDS);
	}
	
	
}
